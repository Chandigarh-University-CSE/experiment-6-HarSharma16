House Robber:

CODE:

class Solution {
public:
    int rob(vector<int>& nums) {
         int n = nums.size();
        if (n == 0) return 0; 
        if (n == 1) return nums[0]; 
        std::vector<int> dp(n);
        dp[0] = nums[0];
        dp[1] = std::max(nums[0], nums[1]); 

        for (int i = 2; i < n; ++i) {
            dp[i] = std::max(dp[i - 1], nums[i] + dp[i - 2]);
        }

        return dp[n - 1];
    }
};



Longest Increasing Subsequence:

CODE:

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
         std::vector<int> tails; 

        for (int num : nums) {
          
            auto it = std::lower_bound(tails.begin(), tails.end(), num);
            if (it == tails.end()) {
                tails.push_back(num); 
            } else {
                *it = num;
            }
        }

        return tails.size(); 
    }
};



Perfect Square:

CODE:

class Solution {
public:
    int numSquares(int n) {
         std::vector<int> dp(n + 1, INT_MAX);
        dp[0] = 0; 

        for (int i = 1; i <= n; ++i) {
           
            for (int j = 1; j * j <= i; ++j) {
                int square = j * j;
                dp[i] = std::min(dp[i], dp[i - square] + 1);
            }
        }

        return dp[n];
    }
};
